package configuration;
//
//import context.TestContext;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Properties;

import enums.BrowserType;
import enums.EnvironmentType;
 
public class Configuration {
 

	 private static Properties properties;
	 private final String propertyFilePath= "configs//Configuration.properties";
	 
	 public Configuration()
     {
	         BufferedReader reader;
	         try {
	         reader = new BufferedReader(new FileReader(propertyFilePath));
	         properties = new Properties();
	         try {
	         properties.load(reader);
	         reader.close();
	         } catch (IOException e) {
	         e.printStackTrace();
	         }
	         } catch (FileNotFoundException e) {
	         e.printStackTrace();
	         throw new RuntimeException("Configuration.properties not found at " + propertyFilePath);
	         }
	     }

 
 public String getApplicationUrl() {
 String url = properties.getProperty("url");
 if(url != null) return url;
 else throw new RuntimeException("url not specified in the Configuration.properties file.");
 }
 
 public String getBrowserName() {
 String browserName = properties.getProperty("browser.name");
 if(browserName != null) return browserName;
 else throw new RuntimeException("Browser Name Key value in Configuration.properties is not matched : " + browserName);
 }
 
 public EnvironmentType getEnvironment() {
 String environmentName = properties.getProperty("environment");
 if(environmentName == null || environmentName.equalsIgnoreCase("local")) return EnvironmentType.LOCAL;
 else if(environmentName.equals("remote")) return EnvironmentType.REMOTE;
 else throw new RuntimeException("Environment Type Key value in Configuration.properties is not matched : " + environmentName);
 }
 
 public Boolean getBrowserWindowSize() {
 String windowSize = properties.getProperty("windowMaximize");
 if(windowSize != null) return Boolean.valueOf(windowSize);
 return true;
 }
 
 public long getImplicitlyWait() { 
	 String implicitlyWait = properties.getProperty("implicitlyWait");
	 if(implicitlyWait != null) return Long.parseLong(implicitlyWait);
	 else throw new RuntimeException("implicitlyWait not specified in the Configuration.properties file."); 
	 }
 
 public static String getBranch() {
	 String branch = properties.getProperty("branch");
	 if(branch != null) return branch;
	 else throw new RuntimeException("Branch is not specified in the Configuration.properties file.");	 
	 
 }

 
}
 


